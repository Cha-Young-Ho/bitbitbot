name: Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-macos:
    runs-on: macos-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install Wails CLI
      run: |
        go install github.com/wailsapp/wails/v2/cmd/wails@latest
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-2
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
        
    - name: Create dummy wailsjs bindings
      run: |
        mkdir -p frontend/wailsjs/go/main
        cat > frontend/wailsjs/go/main/App.ts << 'EOF'
        // Dummy Wails bindings for build process
        export const Login = async (userID: string, password: string) => ({ success: false, message: 'Dummy binding' });
        export const Register = async (userID: string, password: string) => ({ success: false, message: 'Dummy binding' });
        export const GetAccountInfo = async (userID: string) => ({ success: false, message: 'Dummy binding' });
        export const GetPlatformInfo = async (userID: string) => ({ success: false, message: 'Dummy binding' });
        export const AddPlatform = async (userID: string, platform: string, name: string, accessKey: string, secretKey: string, passwordPhrase: string) => ({ success: false, message: 'Dummy binding' });
        export const UpdatePlatform = async (userID: string, oldPlatform: string, oldName: string, newPlatform: string, newName: string, accessKey: string, secretKey: string, passwordPhrase: string) => ({ success: false, message: 'Dummy binding' });
        export const DeletePlatform = async (userID: string, platform: string, name: string) => ({ success: false, message: 'Dummy binding' });
        export const CheckForUpdates = async () => ({ success: false, message: 'Dummy binding' });
        export const PerformUpdate = async () => ({ success: false, message: 'Dummy binding' });
        export const CheckPeriodicValidation = async () => ({ success: false, message: 'Dummy binding' });
        export const GetPeriodicValidationNotification = async () => ({ success: false, message: 'Dummy binding' });
        EOF
        
    - name: Build frontend
      working-directory: frontend
      run: npm run build
        
    - name: Generate Wails bindings
      run: wails generate module
        
    - name: Build macOS application
      run: |
        chmod +x ./build-mac.sh
        ./build-mac.sh ${{ steps.version.outputs.version }} ${{ secrets.ENVIRONMENT }} ${{ secrets.BUCKET_NAME }}
        
    - name: Upload macOS build to S3
      run: |
        if [ -f "build/mac_build.${{ steps.version.outputs.version }}.zip" ]; then
          aws s3 cp "build/mac_build.${{ steps.version.outputs.version }}.zip" "s3://${{ secrets.BUCKET_NAME }}/prod/mac_build.${{ steps.version.outputs.version }}.zip"
          echo "Uploaded macOS build: mac_build.${{ steps.version.outputs.version }}.zip"
        fi
        
  build-windows:
    runs-on: windows-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install Wails CLI
      run: |
        go install github.com/wailsapp/wails/v2/cmd/wails@latest
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-2
        
    - name: Extract version from tag
      id: version
      run: |
        $VERSION = $env:GITHUB_REF -replace 'refs/tags/v', ''
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
        
    - name: Create dummy wailsjs bindings
      run: |
        mkdir -p frontend/wailsjs/go/main
        @"
        // Dummy Wails bindings for build process
        export const Login = async (userID: string, password: string) => ({ success: false, message: 'Dummy binding' });
        export const Register = async (userID: string, password: string) => ({ success: false, message: 'Dummy binding' });
        export const GetAccountInfo = async (userID: string) => ({ success: false, message: 'Dummy binding' });
        export const GetPlatformInfo = async (userID: string) => ({ success: false, message: 'Dummy binding' });
        export const AddPlatform = async (userID: string, platform: string, name: string, accessKey: string, secretKey: string, passwordPhrase: string) => ({ success: false, message: 'Dummy binding' });
        export const UpdatePlatform = async (userID: string, oldPlatform: string, oldName: string, newPlatform: string, newName: string, accessKey: string, secretKey: string, passwordPhrase: string) => ({ success: false, message: 'Dummy binding' });
        export const DeletePlatform = async (userID: string, platform: string, name: string) => ({ success: false, message: 'Dummy binding' });
        export const CheckForUpdates = async () => ({ success: false, message: 'Dummy binding' });
        export const PerformUpdate = async () => ({ success: false, message: 'Dummy binding' });
        export const CheckPeriodicValidation = async () => ({ success: false, message: 'Dummy binding' });
        export const GetPeriodicValidationNotification = async () => ({ success: false, message: 'Dummy binding' });
        "@ | Out-File -FilePath "frontend/wailsjs/go/main/App.ts" -Encoding UTF8
        
    - name: Build frontend
      working-directory: frontend
      run: npm run build
        
    - name: Generate Wails bindings
      run: wails generate module
        
    - name: Build Windows application
      run: |
        # Windows용 Wails 빌드
        wails build -platform windows/amd64 -ldflags "-X main.Version=${{ steps.version.outputs.version }} -X main.Environment=${{ secrets.ENVIRONMENT }} -X main.configUrl=https://${{ secrets.BUCKET_NAME }}.s3.ap-northeast-2.amazonaws.com/${{ secrets.ENVIRONMENT }}/config.json -X main.updateUrl=https://${{ secrets.BUCKET_NAME }}.s3.ap-northeast-2.amazonaws.com/${{ secrets.ENVIRONMENT }}/window_build.${{ steps.version.outputs.version }}.zip"
        
        # 빌드 결과 확인
        if (Test-Path "build/bin/bitbit-app.exe") {
          echo "Windows 빌드 완료: build/bin/bitbit-app.exe"
          
          # S3 업로드용 파일 생성
          $S3_FILENAME = "window_build.${{ steps.version.outputs.version }}"
          $S3_FILEPATH = "build/$S3_FILENAME"
          $S3_ZIP_FILENAME = "window_build.${{ steps.version.outputs.version }}.zip"
          $S3_ZIP_FILEPATH = "build/$S3_ZIP_FILENAME"
          
          # 실행 파일을 S3 업로드용으로 복사
          Copy-Item "build/bin/bitbit-app.exe" "$S3_FILEPATH"
          
          # zip 파일 생성
          Compress-Archive -Path "$S3_FILEPATH" -DestinationPath "$S3_ZIP_FILEPATH" -Force
          
          echo "S3 업로드용 파일 생성: $S3_FILEPATH"
          echo "S3 업로드용 ZIP 파일 생성: $S3_ZIP_FILEPATH"
        } else {
          echo "빌드 실패: bitbit-app.exe 파일이 생성되지 않았습니다."
          exit 1
        }
        
    - name: Upload Windows build to S3
      run: |
        if (Test-Path "build/window_build.${{ steps.version.outputs.version }}.zip") {
          aws s3 cp "build/window_build.${{ steps.version.outputs.version }}.zip" "s3://${{ secrets.BUCKET_NAME }}/prod/window_build.${{ steps.version.outputs.version }}.zip"
          echo "Uploaded Windows build: window_build.${{ steps.version.outputs.version }}.zip"
        }
        
  update-config:
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows]
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ap-northeast-2
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Update config.json based on version change
      run: |
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "${{ steps.version.outputs.version }}"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        echo "Version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
        
        # Download current config.json
        aws s3 cp s3://${{ secrets.BUCKET_NAME }}/prod/config.json ./current-config.json
        
        # Read current config
        CURRENT_MAIN_VER=$(jq -r '.mainVer' ./current-config.json)
        CURRENT_MIN_VER=$(jq -r '.minVer' ./current-config.json)
        
        echo "Current config: mainVer=$CURRENT_MAIN_VER, minVer=$CURRENT_MIN_VER"
        
        # Parse current version components
        IFS='.' read -ra CURRENT_MAIN_PARTS <<< "$CURRENT_MAIN_VER"
        CURRENT_MAJOR="${CURRENT_MAIN_PARTS[0]}"
        CURRENT_MINOR="${CURRENT_MAIN_PARTS[1]}"
        CURRENT_PATCH="${CURRENT_MAIN_PARTS[2]}"
        
        # Determine new versions based on version change
        NEW_MAIN_VER="${{ steps.version.outputs.version }}"
        
        if [ "$MAJOR" != "$CURRENT_MAJOR" ]; then
          # Major version change: update both mainVer and minVer
          NEW_MIN_VER="${{ steps.version.outputs.version }}"
          echo "Major version change detected. Updating both mainVer and minVer to $NEW_MAIN_VER"
        elif [ "$MINOR" != "$CURRENT_MINOR" ]; then
          # Minor version change: update only mainVer
          NEW_MIN_VER="$CURRENT_MIN_VER"
          echo "Minor version change detected. Updating mainVer to $NEW_MAIN_VER, keeping minVer as $NEW_MIN_VER"
        else
          # Patch version change: update only mainVer
          NEW_MIN_VER="$CURRENT_MIN_VER"
          echo "Patch version change detected. Updating mainVer to $NEW_MAIN_VER, keeping minVer as $NEW_MIN_VER"
        fi
        
        # Update config.json
        jq --arg mainVer "$NEW_MAIN_VER" --arg minVer "$NEW_MIN_VER" \
          '.mainVer = $mainVer | .minVer = $minVer' ./current-config.json > ./updated-config.json
        
        # Upload updated config.json
        aws s3 cp ./updated-config.json s3://${{ secrets.BUCKET_NAME }}/prod/config.json
        
        echo "Updated config.json uploaded: mainVer=$NEW_MAIN_VER, minVer=$NEW_MIN_VER"